#!/usr/bin/env python3
# =================================================================
# Python program: logs_analysis.py
# - Main Python Program entry point for logs_analysis project
# - Program is an Internal Reporting tool, generating a Summary Report
#   answering (3) questions (below) using SQL Queries of the 'news' DB.
# =================================================================

import psycopg2
import sys
import time


# Query function for Question No. 1
# -----------------------------------
def find_most_popular_articles(cursor):
    query_str = """SELECT title, COUNT(path) AS num_vws
                   FROM articles INNER JOIN log
                     ON articles.slug = SUBSTR(log.path, 10)
                   GROUP BY 1
                   ORDER BY num_vws DESC
                   LIMIT 3;"""
    cursor.execute(query_str)
    return cursor.fetchall()


# Query function for Question No. 2
# -----------------------------------
# - Note: The following DB Views are used/ref'd in the
#         query below:
#         - articles_by_author (ref'd below)
#         - views_by_article (ref'd below)
#         See Program README File for view creation specifics
# -----------------------------------------------------------------
def find_most_popular_article_authors(cursor):
    query_str = """SELECT name, COUNT(path) AS num_vws
                   FROM articles_by_author INNER JOIN views_by_article
                     ON articles_by_author.slug = views_by_article.slug
                     GROUP BY 1
                     ORDER BY 2 DESC;"""
    cursor.execute(query_str)
    return cursor.fetchall()


# Query function for Question No. 3
# -----------------------------------
# - Note: The following DB Views are used/ref'd in the
#         query below:
#         - req_by_day_error_pct (ref'd below)
#         - req_by_day_all (ref'd by view req_by_day_error_pct )
#         - req_by_day_error (ref'd by view req_by_day_error_pct )
#         See Program README File for view creation specifics
# -----------------------------------------------------------------
def find_days_w_more_than_1pct_req_errors(cursor):
    query_str = """SELECT to_char(date_trunc, 'FMMonth DD, YYYY')
                          AS dsp_date,
                     pct_error
                   FROM req_by_day_error_pct
                   WHERE pct_error > 1.0;"""
    cursor.execute(query_str)
    return cursor.fetchall()


if __name__ == "__main__":

    # ----------------------------------------
    # Initialize data for Summary
    # ----------------------------------------
    DBNAME = "news"
    quest_num = 0
    quest_list = ["What are the most popular three articles of all time?",
                  "Who are the most popular article authors of all time?",
                  "On which days did more than 1% of requests lead to errors?"]

    # ----------------------------------------
    # Initialize final output string
    # - Answer text is appended to this var
    # - Write var contents output to STDOUT once
    # ----------------------------------------
    # Report Header
    # -----------------------------------------
    localtime = time.asctime(time.localtime(time.time()))
    final_str = "\n"
    final_str += "  =================================================\n"
    final_str += "  Summary Logs Analysis Report\n"
    final_str += "  -------------------------------------------------\n"
    final_str += "  Report Time Stamp  : " + localtime + "\n"
    final_str += "  Report Generated by: " + sys.argv[0] + "\n"
    final_str += "  =================================================\n"
    final_str += "\n\n"
    final_str += "  Answers to the following questions: \n\n"

    # ----------------------------------------
    # Create DB Connection and Cursor
    # ----------------------------------------
    db = psycopg2.connect(database=DBNAME)
    c = db.cursor()

    # ----------------------------------------
    # Question No. 1
    # ----------------------------------------
    quest_num += 1
    final_str += "  " + str(quest_num) + ". " + quest_list[quest_num-1] + "\n"
    results = find_most_popular_articles(c)
    for (title, num_vws) in results:
        final_str += "     - \"" + title + "\" - " + str(num_vws) + " views\n"
    if (len(results) == 0):
        final_str += "     (NONE FOUND)\n"

    final_str += "\n"

    # ----------------------------------------
    # Question No. 2
    # ----------------------------------------
    quest_num += 1
    final_str += "  " + str(quest_num) + ". " + quest_list[quest_num-1] + "\n"
    results = find_most_popular_article_authors(c)
    for (name, num_vws) in results:
        final_str += "     - " + name + " - " + str(num_vws) + " views\n"
    if (len(results) == 0):
        final_str += "     (NONE FOUND)\n"

    final_str += "\n"

    # ----------------------------------------
    # Question No. 3
    # ----------------------------------------
    quest_num += 1
    final_str += "  " + str(quest_num) + ". " + quest_list[quest_num-1] + "\n"
    results = find_days_w_more_than_1pct_req_errors(c)
    for (dsp_date, pct_err) in results:
        final_str += "     - " + dsp_date + " - " + str(pct_err) + "% errors\n"
    if (len(results) == 0):
        final_str += "     (NONE FOUND)\n"

    final_str += "\n"

    # Close DB after all results have been generated
    db.close()

    # Generate Final Output
    print(final_str)

    sys.exit(0)
